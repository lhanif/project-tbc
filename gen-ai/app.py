from fastapi import FastAPI
from pydantic import BaseModel
from datetime import datetime, date
import os
import requests
import json
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware

# Load env
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# FastAPI setup
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], 
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Input model
class UserProfile(BaseModel):
    name: str
    birth_date: date
    gender: str
    city: str
    hobbies: str  # Comma-separated string

# Endpoint
@app.post("/generate-bio")
def generate_bio(profile: UserProfile):
    age = datetime.now().year - profile.birth_date.year
    prompt = f"""
You are a dating profile generator.

Create a charming, authentic, and unique dating bio in JSON format based on the following user info:

Name: {profile.name}
Age: {age}
Gender: {profile.gender}
City: {profile.city}
Hobbies: {profile.hobbies}

Make it sound personal, engaging, and suitable for a dating app.

Return **only** JSON like this:
{{
  "name": "...",
  "age": ...,
  "city": "...",
  "gender": "...",
  "hobbies": ["...", "..."],
  "bio": "..."
}}

Do not include any explanation.
"""

    response = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json"
        },
        json={
            "model": "llama-3.3-70b-versatile",
            "messages": [
                {"role": "system", "content": "You are a dating app bio generator that outputs only JSON."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 500
        }
    )

    if response.status_code != 200:
        return {"error": response.json()}
    
    content = response.json()["choices"][0]["message"]["content"]
    clean_content = content.strip().strip("```").strip()

    try:
        result_json = json.loads(clean_content)
    except json.JSONDecodeError:
        return {"error": "Invalid JSON generated by model."}

    return result_json
